@page "/diagrams"
@using d2.Net.App.Models
@using d2.Net.App.Services
@inject NavigationManager NavigationManager
@inject IDiagramService DiagramService
@rendermode InteractiveServer

<PageTitle>Diagrams - ArchDiagram</PageTitle>

<div class="container">
    <div class="row mb-4">
        <div class="col-md-6">
            <h1>Diagrams</h1>
        </div>
        <div class="col-md-6 text-end">
            <button class="btn btn-primary" @onclick="CreateNewDiagram">
                <i class="fas fa-plus"></i> Create New Diagram
            </button>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-12">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search diagrams..." @bind="SearchQuery" />
                <button class="btn btn-primary" @onclick="SearchDiagrams">
                    <i class="fas fa-search"></i> Search
                </button>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            @if (Diagrams == null)
            {
                <div class="alert alert-info">
                    <i class="fas fa-spinner fa-spin"></i> Loading diagrams...
                </div>
            }
            else if (Diagrams.Count == 0)
            {
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i> No diagrams found.
                </div>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Level</th>
                            <th>Created At</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var diagram in Diagrams)
                        {
                            <tr>
                                <td>@diagram.Name</td>
                                <td>@diagram.Description</td>
                                <td>@GetDiagramLevel(diagram.Level)</td>
                                <td>@diagram.CreatedAt.ToString("yyyy-MM-dd")</td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-sm btn-primary" @onclick="() => ViewDiagram(diagram.Id)">
                                            <i class="fas fa-eye"></i> View
                                        </button>
                                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteDiagram(diagram.Id)">
                                            <i class="fas fa-trash"></i> Delete
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@code {
    private List<Diagram> Diagrams { get; set; }
    private string SearchQuery { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadDiagrams();
    }

    private async Task LoadDiagrams()
    {
        Diagrams = (await DiagramService.GetDiagramsAsync()).ToList();
    }

    private void CreateNewDiagram()
    {
        NavigationManager.NavigateTo("/c4-diagram-wizard");
    }

    private async Task SearchDiagrams()
    {
        // TODO: Implement search functionality
        await Task.CompletedTask;
    }

    private string GetDiagramLevel(int level)
    {
        return level switch
        {
            1 => "System Context",
            2 => "Container",
            3 => "Component",
            4 => "Code",
            _ => "Unknown"
        };
    }

    private void ViewDiagram(int diagramId)
    {
        NavigationManager.NavigateTo($"/diagrams/{diagramId}");
    }

    private async Task DeleteDiagram(int diagramId)
    {
        // TODO: Implement deleting a diagram
        await Task.CompletedTask;
    }
}
