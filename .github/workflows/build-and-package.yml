name: Build, Package, and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write

env:
  DOTNET_VERSION: '8.0.x'
  GO_VERSION: '1.22.2'
  NUGET_PACKAGE_NAME: 'd2.Net'
  CI: true

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Install GCC (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y gcc

    - name: Install dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Test
      run: dotnet test --no-restore --verbosity normal

    - name: Build native library
      run: |
        cd src/d2.Net/d2wrapper
        go build -buildmode=c-shared -o d2wrapper${{ runner.os == 'Windows' && '.dll' || runner.os == 'macOS' && '.dylib' || '.so' }} .

    - name: Upload d2.Net build artifact
      uses: actions/upload-artifact@v3
      with:
        name: d2net-${{ matrix.os }}
        path: src/d2.Net/bin/Release/net8.0/d2.Net.*

    - name: Upload native library
      uses: actions/upload-artifact@v3
      with:
        name: d2wrapper-${{ matrix.os }}
        path: src/d2.Net/d2wrapper/d2wrapper*

    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: build-logs-${{ matrix.os }}
        path: |
          **/*.log
          **/*.trx

  package:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Prepare files for packaging
      run: |
        mkdir -p package/lib/net8.0
        mkdir -p package/runtimes/win-x64/native
        mkdir -p package/runtimes/linux-x64/native
        mkdir -p package/runtimes/osx-x64/native
        
        cp artifacts/d2net-ubuntu-latest/d2.Net.dll package/lib/net8.0/
        cp artifacts/d2wrapper-windows-latest/d2wrapper.dll package/runtimes/win-x64/native/
        cp artifacts/d2wrapper-ubuntu-latest/d2wrapper.dll package/runtimes/linux-x64/native/
        cp artifacts/d2wrapper-macos-latest/d2wrapper.dll package/runtimes/osx-x64/native/

    - name: Get version
      id: get_version
      run: |
        VERSION=$(grep -oP '(?<=<VersionPrefix>).*(?=</VersionPrefix>)' src/d2.Net/d2.Net.csproj)
        SUFFIX=$(grep -oP '(?<=<VersionSuffix>).*(?=</VersionSuffix>)' src/d2.Net/d2.Net.csproj)
        if [ ! -z "$SUFFIX" ]; then
          VERSION="$VERSION-$SUFFIX"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    - name: Create nuspec file
      run: |
        cat << EOF > d2.Net.nuspec
        <?xml version="1.0" encoding="utf-8"?>
        <package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
          <metadata>
            <id>d2.Net</id>
            <version>${{ steps.get_version.outputs.VERSION }}</version>
            <authors>Your Name</authors>
            <description>d2.Net is a .NET wrapper for the D2 diagramming library</description>
            <dependencies>
              <group targetFramework="net8.0">
                <dependency id="Microsoft.Extensions.Logging" version="8.0.0" />
              </group>
            </dependencies>
          </metadata>
          <files>
            <file src="package\lib\net8.0\d2.Net.dll" target="lib\net8.0" />
            <file src="package\runtimes\**\*" target="runtimes" />
          </files>
        </package>
        EOF

    - name: Pack NuGet package
      run: nuget pack d2.Net.nuspec -BasePath package

    - name: Upload NuGet package
      uses: actions/upload-artifact@v3
      with:
        name: nuget-package
        path: ./*.nupkg

  release:
    needs: package
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3

    - name: Download NuGet package
      uses: actions/download-artifact@v3
      with:
        name: nuget-package

    - name: Get version
      id: get_version
      run: |
        VERSION=$(grep -oP '(?<=<VersionPrefix>).*(?=</VersionPrefix>)' src/d2.Net/d2.Net.csproj)
        SUFFIX=$(grep -oP '(?<=<VersionSuffix>).*(?=</VersionSuffix>)' src/d2.Net/d2.Net.csproj)
        if [ ! -z "$SUFFIX" ]; then
          VERSION="$VERSION-$SUFFIX"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: true

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.NUGET_PACKAGE_NAME }}.${{ steps.get_version.outputs.VERSION }}.nupkg
        asset_name: ${{ env.NUGET_PACKAGE_NAME }}.${{ steps.get_version.outputs.VERSION }}.nupkg
        asset_content_type: application/octet-stream

    # - name: Publish to NuGet
    #   run: dotnet nuget push ./*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
