name: Build, Package, and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write

env:
  DOTNET_VERSION: '8.0.x'
  GO_VERSION: '1.22.2'
  NUGET_PACKAGE_NAME: 'd2.Net'

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Install GCC (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y gcc

    - name: Install dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Test
      run: dotnet test --no-restore --verbosity normal

    - name: Build native library
      run: |
        cd src/d2.Net/d2wrapper
        go build -buildmode=c-shared -o d2wrapper${{ matrix.os == 'windows-latest' && '.dll' || matrix.os == 'macos-latest' && '.dylib' || '.so' }} .

    - name: Upload native library
      uses: actions/upload-artifact@v3
      with:
        name: native-lib-${{ matrix.os }}
        path: src/d2.Net/d2wrapper/d2wrapper*

    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: build-logs-${{ matrix.os }}
        path: |
          **/*.log
          **/*.trx

  package:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Prepare native libraries
      run: |
        mkdir -p runtimes/win-x64/native
        mkdir -p runtimes/linux-x64/native
        mkdir -p runtimes/osx-x64/native
        mv native-lib-windows-latest/d2wrapper.dll runtimes/win-x64/native/
        mv native-lib-ubuntu-latest/d2wrapper.so runtimes/linux-x64/native/
        mv native-lib-macos-latest/d2wrapper.dylib runtimes/osx-x64/native/

    - name: Pack
      run: dotnet pack src/d2.Net/d2.Net.csproj --configuration Release --output .

    - name: Upload NuGet package
      uses: actions/upload-artifact@v3
      with:
        name: nuget-package
        path: ./*.nupkg

  release:
    needs: package
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3

    - name: Download NuGet package
      uses: actions/download-artifact@v3
      with:
        name: nuget-package

    - name: Get version
      id: get_version
      run: echo "VERSION=$(grep -oP '(?<=<Version>).*(?=</Version>)' src/d2.Net/d2.Net.csproj)" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.NUGET_PACKAGE_NAME }}.${{ steps.get_version.outputs.VERSION }}.nupkg
        asset_name: ${{ env.NUGET_PACKAGE_NAME }}.${{ steps.get_version.outputs.VERSION }}.nupkg
        asset_content_type: application/octet-stream

    # - name: Publish to NuGet
    #   run: dotnet nuget push ./*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json